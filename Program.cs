using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using System.Text;
using System.Text.RegularExpressions;


string BOT_TOKEN = Environment.GetEnvironmentVariable("TELEGRAM_BOT_TOKEN") ?? throw new Exception("");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è GitHub Actions
bool IS_GITHUB_ACTIONS = Environment.GetEnvironmentVariable("GITHUB_ACTIONS") == "true";
string BOT_TOKEN = Environment.GetEnvironmentVariable("TELEGRAM_BOT_TOKEN") 
                   ?? throw new Exception("‚ùå TELEGRAM_BOT_TOKEN not found! Add it to GitHub Secrets");

if (IS_GITHUB_ACTIONS)
{
    Console.WriteLine("üéØ GITHUB ACTIONS MODE ACTIVATED");
    Console.WriteLine("=================================");
    Console.WriteLine($"üè∑Ô∏è  Repository: {Environment.GetEnvironmentVariable("GITHUB_REPOSITORY")}");
    Console.WriteLine($"üÜî Run ID: {Environment.GetEnvironmentVariable("GITHUB_RUN_ID")}");
    Console.WriteLine("‚è∞ Runtime: 5 hours 50 minutes");
    Console.WriteLine("üîÑ Restart: Auto (every 5 hours)");
    Console.WriteLine("=================================");
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
AppDomain.CurrentDomain.UnhandledException += (sender, e) =>
{
    Console.WriteLine($"üí• GLOBAL UNHANDLED EXCEPTION: {e.ExceptionObject}");
    if (IS_GITHUB_ACTIONS)
    {
        Console.WriteLine("üîÑ Bot will restart automatically in 5 hours");
    }
    Environment.Exit(1);
};

TaskScheduler.UnobservedTaskException += (sender, e) =>
{
    Console.WriteLine($"üí• UNOBSERVED TASK EXCEPTION: {e.Exception}");
    e.SetObserved();
};

try
{
    Console.WriteLine($"üöÄ Starting Telegram Bot at {DateTime.Now}");
    
    // –û—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...
    var botClient = new TelegramBotClient(BOT_TOKEN);
    var me = await botClient.GetMeAsync();
    
    Console.WriteLine($"‚úÖ Bot @{me.Username} started successfully");
    
    if (IS_GITHUB_ACTIONS)
    {
        Console.WriteLine("‚è≥ Running for 5 hours 50 minutes...");
        // –ñ–¥–µ–º 5 —á–∞—Å–æ–≤ 50 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ graceful shutdown
        await Task.Delay(TimeSpan.FromHours(5).Add(TimeSpan.FromMinutes(50)));
        Console.WriteLine("üïí Time limit reached, graceful shutdown");
        Environment.Exit(0);
    }
    else
    {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∑–∞–ø—É—Å–∫
        await Task.Delay(-1);
    }
}
catch (Exception ex)
{
    Console.WriteLine($"üí• FATAL ERROR: {ex}");
    if (IS_GITHUB_ACTIONS)
    {
        Console.WriteLine("üîú Auto-restart in 5 hours via GitHub Actions");
    }
    Environment.Exit(1);
}

var botClient = new TelegramBotClient(BOT_TOKEN);

try
{
    var me = await botClient.GetMeAsync();
    Console.WriteLine($" –ë–æ—Ç @{me.Username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
}
catch (Exception ex)
{
    return;
}

var receiverOptions = new ReceiverOptions
{
    AllowedUpdates = []
};

botClient.StartReceiving(
    updateHandler: HandleUpdateAsync,
    pollingErrorHandler: HandlePollingErrorAsync,
    receiverOptions: receiverOptions
);

await Task.Delay(-1);

async Task HandleUpdateAsync(ITelegramBotClient client, Update update, CancellationToken ct)
{
    if (update.Message is not { Text: { } messageText } message)
        return;

    var chatId = message.Chat.Id;
    var userName = message.From?.FirstName ?? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

    Console.WriteLine($"üì® {userName}: {messageText}");

    if (messageText.StartsWith("/"))
    {
        switch (messageText)
        {
            case "/start":
                await SendWelcomeMessage(chatId, ct);
                break;
            case "/help":
                await SendHelpMessage(chatId, ct);
                break;
            default:
                await SendUnknownCommand(chatId, ct);
                break;
        }
    }
    else
    {
        await ProcessCarNumber(chatId, messageText, ct);
    }
}

Task HandlePollingErrorAsync(ITelegramBotClient client, Exception exception, CancellationToken ct)
{
    Console.WriteLine($" –û—à–∏–±–∫–∞: {exception.Message}");
    return Task.CompletedTask;
}

async Task SendWelcomeMessage(long chatId, CancellationToken ct)
{
    var text = """
     *–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤*

    –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

     *–ü—Ä–∏–º–µ—Ä—ã –Ω–æ–º–µ—Ä–æ–≤:*
    ‚Ä¢ –ê123–ë–í78
    ‚Ä¢ –ê123–ë–í 78
    ‚Ä¢ —Ö123—Ö—Ö777
    ‚Ä¢ –µ088—Ç–∞73

     *–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –ø–∞—Ä—Å–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è*
    """;

    await botClient.SendTextMessageAsync(
        chatId: chatId,
        text: text,
        parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown,
        cancellationToken: ct);
}

async Task ProcessCarNumber(long chatId, string number, CancellationToken ct)
{
    if (!IsValidCarNumber(number))
    {
        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: " *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: *–ê123–ë–í78*\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ê123–ë–í78\n‚Ä¢ –ï001–ö–•178\n‚Ä¢ –•123–•–•777",
            parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown,
            cancellationToken: ct);
        return;
    }

    try
    {
        var processingMessage = await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: " –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...",
            cancellationToken: ct);

        var carInfo = await GetCarInfoWithSeleniumAsync(number);

        if (!carInfo.IsValid)
        {
            await botClient.EditMessageTextAsync(
                chatId: chatId,
                messageId: processingMessage.MessageId,
                text: $"‚ùå *–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n–ù–æ–º–µ—Ä `{number}` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞",
                parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown,
                cancellationToken: ct);
            return;
        }

        var resultText = FormatCarInfo(carInfo);

        await botClient.EditMessageTextAsync(
            chatId: chatId,
            messageId: processingMessage.MessageId,
            text: resultText,
            parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown,
            cancellationToken: ct);

        if (!string.IsNullOrEmpty(carInfo.PhotoUrl) && carInfo.PhotoUrl != "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        {
            try
            {
                await botClient.SendPhotoAsync(
                    chatId: chatId,
                    photo: InputFile.FromUri(carInfo.PhotoUrl),
                    caption: " –§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    cancellationToken: ct);

                Console.WriteLine($" –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {carInfo.PhotoUrl}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($" –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {ex.Message}");
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: $" –§–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: {carInfo.PhotoUrl}",
                    cancellationToken: ct);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($" –û—à–∏–±–∫–∞: {ex.Message}");
        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: $" –û—à–∏–±–∫–∞: {ex.Message}",
            cancellationToken: ct);
    }
}

async Task SendHelpMessage(long chatId, CancellationToken ct)
{
    await botClient.SendTextMessageAsync(
        chatId: chatId,
        text: " –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–æ–º–µ—Ä–µ –ø–∞—Ä—Å–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è",
        cancellationToken: ct);
}

async Task SendUnknownCommand(long chatId, CancellationToken ct)
{
    await botClient.SendTextMessageAsync(
        chatId: chatId,
        text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help",
        cancellationToken: ct);
}

bool IsValidCarNumber(string text)
{
    if (string.IsNullOrWhiteSpace(text))
    {
        Console.WriteLine(" –ü—É—Å—Ç–æ–π –Ω–æ–º–µ—Ä");
        return false;
    }

    var cleanNumber = text.Replace(" ", "").ToUpper();

    if (cleanNumber.Length < 6 || cleanNumber.Length > 9)
    {
        return false;
    }

    var hasLetters = cleanNumber.Any(char.IsLetter);
    var hasDigits = cleanNumber.Any(char.IsDigit);

    if (!hasLetters || !hasDigits)
    {
        Console.WriteLine($" –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã");
        return false;
    }

    var russianLetters = "–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•";
    var hasRussianLetters = cleanNumber.Any(c => russianLetters.Contains(c));

    if (!hasRussianLetters)
    {
        Console.WriteLine($"–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã");
        return false;
    }

    Console.WriteLine($"–ù–æ–º–µ—Ä –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: {cleanNumber}");
    return true;
}

async Task<CarInfo> GetCarInfoWithSeleniumAsync(string number)
{
    ChromeDriver? driver = null;
    
    try
    {
        Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chrome –±—Ä–∞—É–∑–µ—Ä...");
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome –¥–ª—è GitHub Actions
        var options = new ChromeOptions();
        
        if (Environment.GetEnvironmentVariable("GITHUB_ACTIONS") == "true")
        {
            Console.WriteLine("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è GitHub Actions...");
            options.BinaryLocation = "/usr/bin/google-chrome";
        }
        
        // –û–°–ù–û–í–ù–´–ï –ê–†–ì–£–ú–ï–ù–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –í CI/CD
        options.AddArgument("--no-sandbox");
        options.AddArgument("--disable-dev-shm-usage");
        options.AddArgument("--disable-gpu");
        options.AddArgument("--headless=new");
        options.AddArgument("--window-size=1920,1080");
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å user data directory
        options.AddArgument("--disable-features=VizDisplayCompositor");
        options.AddArgument("--disable-background-timer-throttling");
        options.AddArgument("--disable-backgrounding-occluded-windows");
        options.AddArgument("--disable-renderer-backgrounding");
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        options.AddExcludedArgument("enable-automation");
        options.AddAdditionalOption("useAutomationExtension", false);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
        options.AddArgument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36");

        // –í–ê–ñ–ù–û: –£–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        var tempUserDataDir = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
        options.AddArgument($"--user-data-dir={tempUserDataDir}");
        
        Console.WriteLine($"üìÅ User data directory: {tempUserDataDir}");
        Console.WriteLine("üåê –°–æ–∑–¥–∞–µ–º Chrome –¥—Ä–∞–π–≤–µ—Ä...");
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
        var service = ChromeDriverService.CreateDefaultService();
        service.HideCommandPromptWindow = true;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        driver = new ChromeDriver(service, options);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
        driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(15);
        driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(45);
        driver.Manage().Timeouts().AsynchronousJavaScript = TimeSpan.FromSeconds(30);
        
        Console.WriteLine("‚úÖ Chrome –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");
        Console.WriteLine("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ statenumber.ru...");
        
        try
        {
            driver.Navigate().GoToUrl("https://statenumber.ru/modules/catalog/");
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await Task.Delay(5000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            if (driver.Title.Contains("error") || driver.Title.Contains("404"))
            {
                throw new Exception("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
            
            Console.WriteLine($"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {driver.Title}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {ex.Message}");
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
            driver.Navigate().GoToUrl("https://statenumber.ru/");
            await Task.Delay(3000);
        }
        
        // –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
        Console.WriteLine("üîç –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞...");
        IWebElement inputField;
        
        try
        {
            inputField = driver.FindElement(By.CssSelector("input.inputGosnomerVin[name='nomerGet']"));
            Console.WriteLine("‚úÖ –ü–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É");
        }
        catch
        {
            try
            {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                inputField = driver.FindElement(By.CssSelector("input[name='nomerGet']"));
                Console.WriteLine("‚úÖ –ü–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É");
            }
            catch
            {
                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –ª—é–±–æ–π input
                inputField = driver.FindElement(By.CssSelector("input[type='text']"));
                Console.WriteLine("‚úÖ –ü–æ–ª–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –æ–±—â–µ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É");
            }
        }
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä
        inputField.Clear();
        inputField.SendKeys(number);
        Console.WriteLine($"üìù –í–≤–µ–ª–∏ –Ω–æ–º–µ—Ä: {number}");
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        IWebElement? submitButton = null;
        var buttonSelectors = new[]
        {
            "input[type='submit']",
            "button[type='submit']",
            ".btn",
            ".button",
            "button",
            "input.btn",
            "input[type='button']",
            "[onclick*='submit']",
            "form input[type='submit']",
            "form button"
        };
        
        foreach (var selector in buttonSelectors)
        {
            try
            {
                var buttons = driver.FindElements(By.CssSelector(selector));
                if (buttons.Count > 0)
                {
                    submitButton = buttons.First(b => b.Displayed && b.Enabled);
                    Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}");
                    break;
                }
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        if (submitButton == null)
        {
            // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Enter
            Console.WriteLine("‚å® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Enter...");
            inputField.SendKeys(Keys.Enter);
        }
        else
        {
            Console.WriteLine("üñ± –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏...");
            try
            {
                submitButton.Click();
            }
            catch
            {
                // –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JavaScript
                ((IJavaScriptExecutor)driver).ExecuteScript("arguments[0].click();", submitButton);
                Console.WriteLine("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ JavaScript");
            }
        }
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        Console.WriteLine("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...");
        await Task.Delay(8000);
        
        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        Console.WriteLine("üîç –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...");
        return ParseSeleniumResults(driver, number);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"üí• –û—à–∏–±–∫–∞ –≤ Selenium: {ex.Message}");
        Console.WriteLine($"üí• Stack trace: {ex.StackTrace}");
        throw new Exception($"–û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {ex.Message}");
    }
    finally
    {
        // –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        try
        {
            driver?.Quit();
            driver?.Dispose();
            Console.WriteLine("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {ex.Message}");
        }
    }
}

CarInfo ParseSeleniumResults(IWebDriver driver, string number)
{
    var carInfo = new CarInfo { Number = number, IsValid = false };

    try
    {
        if (IsNumberNotFound(driver))
        {
            Console.WriteLine($" –ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ");
            carInfo.IsValid = false;
            return carInfo;
        }

        carInfo.Region = GetElementText(driver, "dataRegion");
        carInfo.VIN = GetElementText(driver, "dataVin");
        carInfo.Power = GetElementText(driver, "dataPower");
        carInfo.Color = GetElementText(driver, "dataColor");
        carInfo.Country = GetElementText(driver, "dataCountryBuild");

        carInfo.PhotoUrl = ExtractPhotoUrl(driver);

        if (carInfo.Region == "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        {
            Console.WriteLine(" –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...");

            carInfo.Region = FindByClass(driver, "resultAutoCardDataItemAnswer", "–†–µ–≥–∏–æ–Ω");
            carInfo.Color = FindByClass(driver, "resultAutoCardDataItemAnswer", "–¶–≤–µ—Ç");
            carInfo.Power = FindByClass(driver, "resultAutoCardDataItemAnswer", "–ú–æ—â–Ω–æ—Å—Ç—å");
            carInfo.VIN = FindByClass(driver, "resultAutoCardDataItemAnswer", "VIN");
        }

        var hasData = carInfo.Region != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" || carInfo.Color != "–ù–µ —É–∫–∞–∑–∞no" ||
                      carInfo.Power != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" || carInfo.VIN != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" ||
                      carInfo.Country != "–ù–µ —É–∫–∞–∑–∞–Ω–æ" || carInfo.PhotoUrl != "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

        carInfo.IsValid = hasData;

        Console.WriteLine($" –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:");
        Console.WriteLine($"   –†–µ–≥–∏–æ–Ω: {carInfo.Region}");
        Console.WriteLine($"   VIN: {carInfo.VIN}");
        Console.WriteLine($"   –ú–æ—â–Ω–æ—Å—Ç—å: {carInfo.Power}");
        Console.WriteLine($"   –¶–≤–µ—Ç: {carInfo.Color}");
        Console.WriteLine($"   –°—Ç—Ä–∞–Ω–∞: {carInfo.Country}");
        Console.WriteLine($"   –§–æ—Ç–æ: {carInfo.PhotoUrl}");
        Console.WriteLine($"   –ù–æ–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω: {carInfo.IsValid}");

        return carInfo;
    }
    catch (Exception ex)
    {
        Console.WriteLine($" –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {ex.Message}");
        carInfo.IsValid = false;
        return carInfo;
    }
}

bool IsNumberNotFound(IWebDriver driver)
{
    try
    {
        var errorSelectors = new[]
        {
            ".error",
            ".alert",
            ".message",
            ".resultAutoCardDataItemAnswer",
            "div[style*='display: none']",   
            "div:empty"                      
        };

        foreach (var selector in errorSelectors)
        {
            try
            {
                var elements = driver.FindElements(By.CssSelector(selector));
                foreach (var element in elements)
                {
                    var text = element.Text.Trim().ToLower();
                    if (text.Contains("–Ω–µ –Ω–∞–π–¥–µ–Ω") || text.Contains("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") ||
                        text.Contains("–æ—à–∏–±–∫–∞") || text.Contains("error") ||
                        string.IsNullOrEmpty(text))
                    {
                        return true;
                    }
                }
            }
            catch
            {
            }
        }

        var dataElements = driver.FindElements(By.CssSelector("#dataRegion, #dataVin, #dataPower, #dataColor, #dataCountryBuild"));
        if (dataElements.Count == 0)
        {
            Console.WriteLine("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏");
            return true;
        }

        var allEmpty = true;
        foreach (var element in dataElements)
        {
            if (!string.IsNullOrEmpty(element.Text.Trim()))
            {
                allEmpty = false;
                break;
            }
        }

        if (allEmpty)
        {
            return true;
        }

        return false;
    }
    catch (Exception ex)
    {
        return false;
    }
}

string ExtractPhotoUrl(IWebDriver driver)
{
    try
    {
        var photoElements = driver.FindElements(By.CssSelector("div.resultAutoCardPhotoImg"));
        if (photoElements.Count == 0)
        {
            Console.WriteLine("–ë–ª–æ–∫ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        }

        var photoElement = photoElements[0];

        var styleAttribute = photoElement.GetAttribute("style");
        if (!string.IsNullOrEmpty(styleAttribute))
        {
            Console.WriteLine($"–ù–∞–π–¥–µ–Ω style –∞—Ç—Ä–∏–±—É—Ç: {styleAttribute}");

            var urlMatch = Regex.Match(styleAttribute, @"url\(['""]?([^'""\)]+)['""]?\)");
            if (urlMatch.Success)
            {
                var photoUrl = urlMatch.Groups[1].Value;
                return photoUrl;
            }
        }

        var imgElements = photoElement.FindElements(By.TagName("img"));
        if (imgElements.Count > 0)
        {
            var imgSrc = imgElements[0].GetAttribute("src");
            if (!string.IsNullOrEmpty(imgSrc))
            {
                Console.WriteLine($"–ù–∞–π–¥–µ–Ω URL —Ñ–æ—Ç–æ –≤ img: {imgSrc}");
                return imgSrc;
            }
        }

        var dataSrc = photoElement.GetAttribute("data-src");
        if (!string.IsNullOrEmpty(dataSrc))
        {
            return dataSrc;
        }

        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    }
    catch (Exception ex)
    {
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    }
}

string GetElementText(IWebDriver driver, string elementId)
{
    try
    {
        var element = driver.FindElement(By.Id(elementId));
        var text = element.Text.Trim();
        return string.IsNullOrEmpty(text) ? "–ù–µ —É–∫–∞–∑–∞–Ω–æ" : text;
    }
    catch
    {
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    }
}

string FindByClass(IWebDriver driver, string className, string title)
{
    try
    {
        var elements = driver.FindElements(By.ClassName(className));
        foreach (var element in elements)
        {
            var parent = element.FindElement(By.XPath("./.."));
            var parentText = parent.Text;

            if (parentText.Contains(title))
            {
                var text = element.Text.Trim();
                return string.IsNullOrEmpty(text) ? "–ù–µ —É–∫–∞–∑–∞–Ω–æ" : text;
            }
        }
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    }
    catch
    {
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    }
}

string FormatCarInfo(CarInfo info)
{
    var builder = new StringBuilder();

    builder.AppendLine($"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ*");
    builder.AppendLine();

    builder.AppendLine($"*–ù–æ–º–µ—Ä:* `{info.Number}`");
    builder.AppendLine($"*–†–µ–≥–∏–æ–Ω:* {info.Region}");
    builder.AppendLine($"*–°—Ç—Ä–∞–Ω–∞:* {info.Country}");
    builder.AppendLine($"*–¶–≤–µ—Ç:* {info.Color}");
    builder.AppendLine($"*–ú–æ—â–Ω–æ—Å—Ç—å:* {info.Power} –ª.—Å.");
    builder.AppendLine($"*VIN:* `{info.VIN}`");

    builder.AppendLine();

    if (!string.IsNullOrEmpty(info.PhotoUrl) && info.PhotoUrl != "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    {
        builder.AppendLine(" *–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è*");
    }



    return builder.ToString();
}

public class CarInfo
{
    public string Number { get; set; } = string.Empty;
    public string Region { get; set; } = string.Empty;
    public string VIN { get; set; } = string.Empty;
    public string Power { get; set; } = string.Empty;
    public string Color { get; set; } = string.Empty;
    public string Country { get; set; } = string.Empty;
    public string PhotoUrl { get; set; } = string.Empty;
    public bool IsValid { get; set; } = true;
}

