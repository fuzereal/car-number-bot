name: ü§ñ Telegram Car Number Bot

on:
  push:
    branches: [ main, master ]
  schedule:
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤ 50 –º–∏–Ω—É—Ç (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 6-—á–∞—Å–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞)
    - cron: '50 */5 * * *'
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ç—Ä–æ–º
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'  
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  run-bot:
    name: üöÄ Run Telegram Bot
    runs-on: ubuntu-latest
    timeout-minutes: 350 # 5 —á–∞—Å–æ–≤ 50 –º–∏–Ω—É—Ç
    
    steps:
    - name: üìã Check Repository Status
      run: |
        echo "=== ü§ñ Bot Startup Information ==="
        echo "Repository: ${{ github.repository }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Triggered by: ${{ github.event_name }}"
        echo "Start time: $(date)"
        echo "Expected runtime: 5 hours 50 minutes"
        echo "Next scheduled run: in 5 hours"
        echo "=================================="
        
    - name: üóÇÔ∏è Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: üõ†Ô∏è Setup .NET Environment
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: üì¶ Restore Dependencies
      run: |
        echo "Restoring NuGet packages..."
        dotnet restore
        echo "‚úÖ Dependencies restored"
        
    - name: üî® Build Application
      run: |
        echo "Building application..."
        dotnet build --configuration Release --no-restore --verbosity minimal
        echo "‚úÖ Application built successfully"
        
    - name: üñ•Ô∏è Setup Chrome Browser
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: 'stable'
        
    - name: üîß Configure Chrome Environment
      run: |
        echo "=== Chrome Configuration ==="
        echo "Chrome path: $(which google-chrome)"
        echo "Chrome version: $(google-chrome --version)"
        echo "ChromeDriver version: $(chromedriver --version)"
        echo "============================"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        mkdir -p /tmp/chrome-profiles
        echo "‚úÖ Chrome environment configured"
        
    - name: üß™ Test Chrome Installation
      run: |
        echo "Testing Chrome installation..."
        timeout 30s google-chrome --headless --disable-gpu --no-sandbox --disable-dev-shm-usage --remote-debugging-port=9222 about:blank &
        CHROME_PID=$!
        sleep 5
        if ps -p $CHROME_PID > /dev/null; then
          echo "‚úÖ Chrome is working correctly"
          kill $CHROME_PID 2>/dev/null || true
        else
          echo "‚ùå Chrome test failed"
          exit 1
        fi
        
    - name: üöÄ Launch Telegram Bot
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        GITHUB_ACTIONS: 'true'
        CHROME_BIN: '/usr/bin/google-chrome'
        CHROME_PATH: '/usr/bin/google-chrome'
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        DEBUG_MODE: ${{ inputs.debug }}
      run: |
        echo "=== ü§ñ Bot Launch Sequence ==="
        echo "Start time: $(date)"
        echo "Environment: GitHub Actions"
        echo "Chrome: $(google-chrome --version)"
        echo "Runtime: 5 hours 50 minutes"
        echo "=============================="
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log() {
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
        }
        
        # –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
        RESTART_COUNT=0
        MAX_RESTARTS=2
        
        while [ $RESTART_COUNT -le $MAX_RESTARTS ]; do
          log "Launch attempt $((RESTART_COUNT + 1))"
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
          START_TIME=$(date +%s)
          dotnet run --configuration Release --no-build &
          BOT_PID=$!
          
          # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å
          while kill -0 $BOT_PID 2>/dev/null; do
            CURRENT_TIME=$(date +%s)
            RUNTIME=$((CURRENT_TIME - START_TIME))
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤ 50 –º–∏–Ω—É—Ç
            if [ $RUNTIME -gt 21000 ]; then
              log "üïí Maximum runtime reached (5h 50m), stopping bot..."
              kill $BOT_PID 2>/dev/null || true
              wait $BOT_PID 2>/dev/null || true
              log "‚úÖ Bot stopped gracefully"
              exit 0
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            sleep 30
          done
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
          wait $BOT_PID
          EXIT_CODE=$?
          
          if [ $EXIT_CODE -eq 0 ]; then
            log "‚úÖ Bot finished successfully"
            break
          else
            log "‚ö†Ô∏è Bot crashed with exit code: $EXIT_CODE"
            RESTART_COUNT=$((RESTART_COUNT + 1))
            
            if [ $RESTART_COUNT -le $MAX_RESTARTS ]; then
              log "üîÑ Restarting in 15 seconds... (attempt $RESTART_COUNT/$MAX_RESTARTS)"
              sleep 15
            else
              log "‚ùå Maximum restart attempts reached"
              exit 1
            fi
          fi
        done
        
        log "üõë Bot execution completed at: $(date)"
        
    - name: üìä Generate Runtime Report
      if: always()
      run: |
        echo "=== üìà Bot Runtime Report ==="
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Start: ${{ fromJSON(steps.run-bot.outputs.start_time) }}"
        echo "End: $(date)"
        echo "Status: ${{ job.status }}"
        echo "Trigger: ${{ github.event_name }}"
        echo "Next run: in 5 hours"
        echo "============================="
        
    - name: üíæ Upload Logs Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bot-logs-${{ github.run_id }}
        path: |
          *.log
          **/*.log
        retention-days: 7
        
    - name: üì¢ Success Notification
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          github.rest.issues.create({
            owner,
            repo,
            title: '‚úÖ Bot Running Successfully',
            body: `ü§ñ Telegram bot is operating normally\n\n**Details:**\n- Workflow: ${{ github.workflow }}\n- Run ID: ${{ github.run_id }}\n- Start: ${new Date().toISOString()}\n- Runtime: 5 hours 50 minutes\n- Next restart: ${new Date(Date.now() + 5 * 60 * 60 * 1000).toISOString()}\n\n[View Workflow Run](https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }})`,
            labels: ['bot', 'success', 'auto-restart']
          });
          
    - name: üö® Failure Notification
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          github.rest.issues.create({
            owner,
            repo,
            title: '‚ö†Ô∏è Bot Restart Required',
            body: `ü§ñ Telegram bot encountered an issue and will restart automatically\n\n**Details:**\n- Workflow: ${{ github.workflow }}\n- Run ID: ${{ github.run_id }}\n- Failure time: ${new Date().toISOString()}\n- Next restart: ${new Date(Date.now() + 5 * 60 * 60 * 1000).toISOString()}\n\n[View Workflow Run](https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }})`,
            labels: ['bot', 'failure', 'auto-restart']
          });

  monitor:
    name: üìä Health Monitor
    runs-on: ubuntu-latest
    needs: run-bot
    if: always()
    
    steps:
    - name: üìà Generate Health Report
      run: |
        echo "=== ü§ñ Bot Health Report ==="
        echo "Generated: $(date)"
        echo "Main Job Status: ${{ needs.run-bot.result }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Duration: ${{ needs.run-bot.outputs.duration }}"
        
        if [ "${{ needs.run-bot.result }}" = "success" ]; then
          echo "Status: ‚úÖ HEALTHY"
          echo "Uptime: 5+ hours"
          echo "Next check: in 5 hours"
        elif [ "${{ needs.run-bot.result }}" = "failure" ]; then
          echo "Status: ‚ö†Ô∏è NEEDS ATTENTION"
          echo "Issue: Bot crashed"
          echo "Action: Auto-restart in 5 hours"
        else
          echo "Status: üîÑ UNKNOWN"
          echo "Action: Monitoring"
        fi
        
        echo "============================"
        
    - name: üîÑ Restart Status
      run: |
        NEXT_RUN=$(date -d "+5 hours" '+%Y-%m-%d %H:%M:%S')
        echo "Next scheduled run: $NEXT_RUN"
        echo "Restart mechanism: GitHub Actions Schedule"
        echo "Cycle: Every 5 hours"
